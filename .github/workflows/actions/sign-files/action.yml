name: "Signing file"
description: "Install and configure the environment to then do the signing of files."

runs:
  using: "composite"
  steps:
    - name: Setup SMCTL
    id: setup-cert
    shell: pwsh
    env:
      SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
    run: |
      # Get certificates
      New-Item -ItemType Directory -Force -Path .\.build\certificates
      Set-Content -Path ".\.build\certificates\codesign.txt" -Value $env:SM_CLIENT_CERT_FILE_B64
      & certutil -decode ".\.build\certificates\codesign.txt" ".\.build\certificates\codesign.pfx"
      # Configure environment for next step
      "SM_CLIENT_CERT_FILE=.\.build\certificates\codesign.pfx" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      # Install SMTL
      curl -o smtools-windows-x64.msi "https://rstudio-buildtools.s3.amazonaws.com/posit-dev/smtools-windows-x64.msi"
      msiexec /i smtools-windows-x64.msi /quiet /qn /log smtools-windows-x64.log
      "C:/Program Files/DigiCert/DigiCert One Signing Manager Tools" | Out-File -FilePath $env:GITHUB_PATH -Append
      "C:/Program Files (x86)/Windows Kits/10/App Certification Kit" | Out-File -FilePath $env:GITHUB_PATH -Append

  - name: Sign files before making ZIP and MSI installer
    shell: pwsh
    run: |
      # Sync certificate
      smctl windows certsync
      # Sign each file that will be bundled in the installer
      $paths = @(
        "./package/pkg-working/bin/quarto.exe",
        "./package/pkg-working/bin/tools/x86_64/deno.exe",
        "./package/pkg-working/bin/tools/x86_64/esbuild.exe",
        "./package/pkg-working/bin/tools/x86_64/dart-sass/src/dart.exe",
        "./package/pkg-working/bin/tools/x86_64/deno_dom/plugin.dll",
        "./package/pkg-working/bin/tools/pandoc.exe",
        "./package/pkg-working/bin/quarto.js"
      )
      foreach ($path in $paths) {
        Write-Output "::group::Signing ${path}"
        signtool.exe sign /sha1 ${{ env.CERT_FINGERPRINT }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 $path
        if ($LASTEXITCODE -ne 0) {
          Write-Output "::error title=Signing error::Error while signing ${path}"
          exit 1
        }
        signtool.exe verify /v /pa $path
        if ($LASTEXITCODE -ne 0) {
          Write-Output "::error title=Verify signature error::Error while verifying ${path}"
          exit 1
        }
        Write-Output "::endgroup::"
      }
    env:
      # those environment variables are required to sign with signtool
      SM_HOST: ${{ secrets.SM_HOST }}
      SM_API_KEY: ${{ secrets.SM_API_KEY }}
      SM_CLIENT_CERT_FILE: ${{ steps.setup-cert.outputs.SM_CLIENT_CERT_FILE }}
      SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
      CERT_FINGERPRINT: ${{ secrets.SM_CLIENT_CERT_FINGERPRINT }}
